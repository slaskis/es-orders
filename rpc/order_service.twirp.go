// Code generated by protoc-gen-twirp v5.0.0, DO NOT EDIT.
// source: rpc/order_service.proto

package rpc

import bytes "bytes"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import log "log"
import http "net/http"

import jsonpb "github.com/gogo/protobuf/jsonpb"
import proto "github.com/gogo/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ======================
// OrderService Interface
// ======================

type OrderService interface {
	CreateOrder(context.Context, *OrderNewRequest) (*OrderResponse, error)

	AddItem(context.Context, *OrderItemAddRequest) (*OrderResponse, error)

	RemoveItem(context.Context, *OrderItemRemoveRequest) (*OrderResponse, error)

	ApproveOrder(context.Context, *OrderApproveRequest) (*OrderResponse, error)

	RejectOrder(context.Context, *OrderRejectRequest) (*OrderResponse, error)

	GetOrder(context.Context, *GetOrderRequest) (*OrderResponse, error)
}

// ============================
// OrderService Protobuf Client
// ============================

type orderServiceProtobufClient struct {
	urlBase string
	client  *http.Client
}

// NewOrderServiceProtobufClient creates a Protobuf client that implements the OrderService interface.
// It communicates using protobuf messages and can be configured with a custom http.Client.
func NewOrderServiceProtobufClient(addr string, client *http.Client) OrderService {
	return &orderServiceProtobufClient{
		urlBase: urlBase(addr),
		client:  withoutRedirects(client),
	}
}

func (c *orderServiceProtobufClient) CreateOrder(ctx context.Context, in *OrderNewRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "CreateOrder"
	out := new(OrderResponse)
	err := doProtoRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceProtobufClient) AddItem(ctx context.Context, in *OrderItemAddRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "AddItem"
	out := new(OrderResponse)
	err := doProtoRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceProtobufClient) RemoveItem(ctx context.Context, in *OrderItemRemoveRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "RemoveItem"
	out := new(OrderResponse)
	err := doProtoRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceProtobufClient) ApproveOrder(ctx context.Context, in *OrderApproveRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "ApproveOrder"
	out := new(OrderResponse)
	err := doProtoRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceProtobufClient) RejectOrder(ctx context.Context, in *OrderRejectRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "RejectOrder"
	out := new(OrderResponse)
	err := doProtoRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceProtobufClient) GetOrder(ctx context.Context, in *GetOrderRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "GetOrder"
	out := new(OrderResponse)
	err := doProtoRequest(ctx, c.client, url, in, out)
	return out, err
}

// ========================
// OrderService JSON Client
// ========================

type orderServiceJSONClient struct {
	urlBase string
	client  *http.Client
}

// NewOrderServiceJSONClient creates a JSON client that implements the OrderService interface.
// It communicates using JSON requests and responses instead of protobuf messages.
func NewOrderServiceJSONClient(addr string, client *http.Client) OrderService {
	return &orderServiceJSONClient{
		urlBase: urlBase(addr),
		client:  withoutRedirects(client),
	}
}

func (c *orderServiceJSONClient) CreateOrder(ctx context.Context, in *OrderNewRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "CreateOrder"
	out := new(OrderResponse)
	err := doJSONRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceJSONClient) AddItem(ctx context.Context, in *OrderItemAddRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "AddItem"
	out := new(OrderResponse)
	err := doJSONRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceJSONClient) RemoveItem(ctx context.Context, in *OrderItemRemoveRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "RemoveItem"
	out := new(OrderResponse)
	err := doJSONRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceJSONClient) ApproveOrder(ctx context.Context, in *OrderApproveRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "ApproveOrder"
	out := new(OrderResponse)
	err := doJSONRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceJSONClient) RejectOrder(ctx context.Context, in *OrderRejectRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "RejectOrder"
	out := new(OrderResponse)
	err := doJSONRequest(ctx, c.client, url, in, out)
	return out, err
}

func (c *orderServiceJSONClient) GetOrder(ctx context.Context, in *GetOrderRequest) (*OrderResponse, error) {
	url := c.urlBase + OrderServicePathPrefix + "GetOrder"
	out := new(OrderResponse)
	err := doJSONRequest(ctx, c.client, url, in, out)
	return out, err
}

// ===========================
// OrderService Server Handler
// ===========================

type orderServiceServer struct {
	OrderService
	hooks *twirp.ServerHooks
}

func NewOrderServiceServer(svc OrderService, hooks *twirp.ServerHooks) TwirpServer {
	return &orderServiceServer{
		OrderService: svc,
		hooks:        hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *orderServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// OrderServicePathPrefix is used for all URL paths on a twirp OrderService server.
// Requests are always: POST OrderServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const OrderServicePathPrefix = "/twirp/acme.OrderService/"

func (s *orderServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "acme")
	ctx = ctxsetters.WithServiceName(ctx, "OrderService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/acme.OrderService/CreateOrder":
		s.serveCreateOrder(ctx, resp, req)
		return
	case "/twirp/acme.OrderService/AddItem":
		s.serveAddItem(ctx, resp, req)
		return
	case "/twirp/acme.OrderService/RemoveItem":
		s.serveRemoveItem(ctx, resp, req)
		return
	case "/twirp/acme.OrderService/ApproveOrder":
		s.serveApproveOrder(ctx, resp, req)
		return
	case "/twirp/acme.OrderService/RejectOrder":
		s.serveRejectOrder(ctx, resp, req)
		return
	case "/twirp/acme.OrderService/GetOrder":
		s.serveGetOrder(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *orderServiceServer) serveCreateOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveCreateOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveCreateOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	reqContent := new(OrderNewRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.CreateOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling CreateOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveCreateOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(OrderNewRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.CreateOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling CreateOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveAddItem(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveAddItemJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddItemProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveAddItemJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddItem")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	reqContent := new(OrderItemAddRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.AddItem(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling AddItem. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveAddItemProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddItem")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(OrderItemAddRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.AddItem(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling AddItem. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveRemoveItem(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveRemoveItemJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveItemProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveRemoveItemJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveItem")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	reqContent := new(OrderItemRemoveRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RemoveItem(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling RemoveItem. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveRemoveItemProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveItem")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(OrderItemRemoveRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RemoveItem(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling RemoveItem. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveApproveOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveApproveOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveApproveOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveApproveOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ApproveOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	reqContent := new(OrderApproveRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ApproveOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling ApproveOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveApproveOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ApproveOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(OrderApproveRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ApproveOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling ApproveOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveRejectOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveRejectOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRejectOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveRejectOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RejectOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	reqContent := new(OrderRejectRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RejectOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling RejectOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveRejectOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RejectOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(OrderRejectRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RejectOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling RejectOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveGetOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveGetOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	reqContent := new(GetOrderRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling GetOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetOrderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *OrderResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *OrderResponse and nil error while calling GetOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *orderServiceServer) ProtocGenTwirpVersion() string {
	return "v5.0.0"
}

var twirpFileDescriptor1 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x5d, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x29, 0xea, 0x6f, 0x28, 0xc9, 0xf4, 0x1a, 0x6d, 0x69, 0xa1, 0xd0, 0x0f, 0x8b, 0x02,
	0xaa, 0x01, 0xcb, 0x00, 0x5b, 0x18, 0x70, 0x51, 0xd4, 0xa0, 0x2c, 0xd6, 0x55, 0x5b, 0xcb, 0x02,
	0xad, 0xc6, 0x48, 0x5e, 0x04, 0x89, 0x5c, 0x2b, 0x0c, 0x44, 0x91, 0x26, 0x97, 0x36, 0x74, 0x8b,
	0x1c, 0x20, 0x07, 0xf2, 0x63, 0x4e, 0x90, 0x04, 0x7e, 0xcd, 0x11, 0xf2, 0x12, 0x68, 0x97, 0x94,
	0x68, 0x59, 0x48, 0x9c, 0xe4, 0x6d, 0x67, 0x67, 0xbe, 0x6f, 0x66, 0x76, 0xbe, 0x1d, 0xf8, 0xc1,
	0xf7, 0xcc, 0x7d, 0xd7, 0xb7, 0xb0, 0x3f, 0x08, 0xb0, 0x7f, 0x6d, 0x9b, 0xb8, 0xe9, 0xf9, 0x2e,
	0x71, 0x91, 0x30, 0x34, 0x1d, 0x5c, 0xde, 0x1b, 0xdb, 0xe4, 0x79, 0x38, 0x6a, 0x9a, 0xae, 0xb3,
	0x3f, 0x76, 0xc7, 0xee, 0x3e, 0x75, 0x8e, 0xc2, 0x4b, 0x6a, 0x51, 0x83, 0x9e, 0x18, 0xa8, 0x5c,
	0x1d, 0xbb, 0xee, 0x78, 0x82, 0x97, 0x51, 0xc4, 0x76, 0x70, 0x40, 0x86, 0x8e, 0xc7, 0x02, 0x94,
	0xf7, 0x29, 0x48, 0x9f, 0xcd, 0xb3, 0xa1, 0x12, 0xf0, 0xb6, 0x25, 0x73, 0x35, 0xae, 0x91, 0x37,
	0x78, 0xdb, 0x42, 0x32, 0x64, 0xaf, 0xb1, 0x1f, 0xd8, 0xee, 0x54, 0xe6, 0x6b, 0x5c, 0x23, 0x6d,
	0xc4, 0x26, 0x42, 0x20, 0x4c, 0x87, 0x0e, 0x96, 0x53, 0x34, 0x96, 0x9e, 0xd1, 0x31, 0x80, 0xe9,
	0xe3, 0x21, 0xc1, 0xd6, 0x60, 0x48, 0x64, 0xa1, 0xc6, 0x35, 0x44, 0xb5, 0xdc, 0x64, 0xd9, 0x9b,
	0x71, 0xf6, 0x66, 0x3f, 0xce, 0xde, 0xca, 0xdd, 0xbe, 0xa9, 0x6e, 0xbc, 0x7c, 0x5b, 0xe5, 0x8c,
	0x7c, 0x84, 0xd3, 0xc8, 0x9c, 0x24, 0xf4, 0xac, 0x98, 0x24, 0xfd, 0x25, 0x24, 0x11, 0x4e, 0x23,
	0xe8, 0x08, 0xc0, 0xc2, 0x13, 0x1c, 0x91, 0x64, 0x3e, 0x4b, 0x22, 0x30, 0x82, 0x08, 0x43, 0xab,
	0x28, 0x5c, 0x86, 0x93, 0x4b, 0x7b, 0x32, 0x61, 0x14, 0xf9, 0x47, 0x52, 0x88, 0x0b, 0x94, 0x46,
	0x50, 0x3d, 0x49, 0x32, 0x9a, 0xc9, 0x40, 0xdf, 0x6a, 0x19, 0xd2, 0x9a, 0xa1, 0x9f, 0x21, 0x6d,
	0x13, 0xec, 0x04, 0xb2, 0x58, 0x4b, 0x35, 0x44, 0x75, 0xb3, 0x39, 0x1f, 0x70, 0x93, 0x0e, 0xa3,
	0x43, 0xb0, 0x63, 0x30, 0x2f, 0xfa, 0x05, 0x32, 0x01, 0x19, 0x92, 0x30, 0x90, 0x0b, 0x35, 0xae,
	0x51, 0x52, 0xb7, 0x12, 0x71, 0xe7, 0xd4, 0x61, 0x44, 0x01, 0xa8, 0x0a, 0xa2, 0x19, 0x06, 0xc4,
	0x75, 0xb0, 0x3f, 0xb0, 0x2d, 0xb9, 0x48, 0x73, 0x42, 0x7c, 0xd5, 0xb1, 0x94, 0x57, 0x1c, 0xe4,
	0x17, 0x09, 0x1e, 0x4c, 0xbc, 0x0c, 0xb9, 0xab, 0x70, 0x38, 0x25, 0x36, 0x99, 0x45, 0x23, 0x5f,
	0xd8, 0x2b, 0xa3, 0x11, 0xbe, 0x6e, 0x34, 0x15, 0x10, 0xe6, 0x3d, 0x51, 0xe1, 0x88, 0x2a, 0xb0,
	0x46, 0x68, 0xaf, 0xf4, 0x5e, 0xf9, 0x1d, 0x84, 0xb5, 0x85, 0x29, 0x20, 0x90, 0x99, 0x87, 0x69,
	0x51, 0x25, 0xb5, 0xb4, 0xc4, 0xf5, 0x67, 0x1e, 0x36, 0xa8, 0x4f, 0xd9, 0x83, 0x6c, 0x17, 0xdf,
	0x50, 0x78, 0x1c, 0xce, 0x7d, 0x22, 0xfc, 0x00, 0x36, 0xe9, 0x43, 0x74, 0xf1, 0x8d, 0x81, 0xaf,
	0x42, 0x1c, 0x10, 0xf4, 0x53, 0x3c, 0x0f, 0x9e, 0xce, 0xa3, 0xc8, 0x70, 0x11, 0x69, 0x34, 0x0d,
	0xe5, 0x1c, 0xb6, 0x17, 0x0f, 0xa8, 0x59, 0x56, 0x8c, 0xdd, 0x81, 0x1c, 0xfb, 0xb3, 0x8b, 0xba,
	0xb3, 0xd4, 0xee, 0x58, 0xa8, 0x1e, 0x35, 0xcd, 0xd3, 0xa6, 0x57, 0x58, 0x59, 0xdf, 0x17, 0xf0,
	0xfd, 0x72, 0xec, 0xd8, 0x71, 0xaf, 0xf1, 0x23, 0x78, 0x15, 0x28, 0x46, 0x2e, 0x82, 0x9d, 0xb9,
	0x9f, 0x67, 0x12, 0x73, 0x63, 0xa6, 0x8e, 0xa5, 0xfc, 0x1d, 0x55, 0xab, 0x79, 0x9e, 0x9f, 0x60,
	0x5d, 0x7d, 0xdf, 0x55, 0xb1, 0xf2, 0x0f, 0xc4, 0xaa, 0x9c, 0x00, 0xa2, 0x4c, 0x06, 0x7e, 0x81,
	0x4d, 0xf2, 0x0d, 0x44, 0x75, 0xd8, 0x3c, 0xc1, 0x24, 0xe2, 0x5a, 0xcb, 0xa2, 0xa8, 0x50, 0x8c,
	0xfc, 0x81, 0xe7, 0x4e, 0x03, 0x8c, 0xea, 0x90, 0xa6, 0x5d, 0xd1, 0x18, 0x51, 0x15, 0x13, 0x3f,
	0xc0, 0x60, 0x9e, 0xdd, 0x53, 0x10, 0x13, 0x3f, 0x02, 0xe5, 0x21, 0xad, 0x9f, 0xf6, 0xfa, 0x4f,
	0xa5, 0x0d, 0x24, 0x42, 0xb6, 0xa7, 0x77, 0xdb, 0x9d, 0xee, 0x89, 0xc4, 0xa1, 0x02, 0xe4, 0xb4,
	0x5e, 0xcf, 0x38, 0x7b, 0xa2, 0xb7, 0x25, 0x7e, 0x6e, 0x19, 0xfa, 0x3f, 0xfa, 0x71, 0x5f, 0x6f,
	0x4b, 0x29, 0x04, 0x90, 0xf9, 0x4b, 0xeb, 0xfc, 0xa7, 0xb7, 0x25, 0x61, 0xf7, 0x37, 0xc8, 0xc5,
	0x82, 0x41, 0x12, 0x14, 0x3a, 0x7d, 0xfd, 0x74, 0xf0, 0x7f, 0xf7, 0xdf, 0xee, 0xd9, 0x45, 0x57,
	0xda, 0x98, 0x47, 0xd2, 0x1b, 0x4d, 0xe2, 0x16, 0xe7, 0x96, 0xc4, 0xab, 0x1f, 0x78, 0x28, 0xb0,
	0x2a, 0xd8, 0xe6, 0x46, 0x87, 0x20, 0x1e, 0xd3, 0xed, 0xc6, 0x56, 0xec, 0x77, 0x89, 0xc2, 0x97,
	0xc2, 0x2b, 0x6f, 0x27, 0xfb, 0x89, 0x7b, 0x3e, 0x84, 0xac, 0x66, 0x59, 0x54, 0xcf, 0x3b, 0x2b,
	0x9b, 0x61, 0xa9, 0xbb, 0xf5, 0xd0, 0x23, 0x00, 0xa6, 0x22, 0x8a, 0xfe, 0x71, 0x75, 0xaf, 0x24,
	0x05, 0xb6, 0x9e, 0xe0, 0x4f, 0x28, 0x44, 0x8a, 0x61, 0x75, 0x27, 0x0b, 0xb8, 0x2f, 0xa5, 0xf5,
	0xf8, 0x3f, 0x40, 0x64, 0x3a, 0x61, 0x70, 0xf9, 0x5e, 0x4c, 0x42, 0x3f, 0xeb, 0xd1, 0x07, 0x90,
	0x8b, 0x15, 0x12, 0xbf, 0xd8, 0x8a, 0x62, 0xd6, 0xe2, 0x5a, 0x5b, 0xb7, 0x77, 0x15, 0xee, 0xf5,
	0x5d, 0x85, 0x7b, 0x77, 0x57, 0xe1, 0x9e, 0xa5, 0x7c, 0xcf, 0x1c, 0x65, 0xe8, 0x66, 0xfa, 0xf5,
	0x63, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xd7, 0x34, 0xca, 0x55, 0x07, 0x00, 0x00,
}
