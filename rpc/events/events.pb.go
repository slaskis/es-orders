// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc/events/events.proto

/*
	Package events is a generated protocol buffer package.

	It is generated from these files:
		rpc/events/events.proto

	It has these top-level messages:
		OrderCreated
		OrderItemAAdded
		OrderItemBAdded
		OrderItemRemoved
		OrderFulfilled
		OrderAssignCustomer
		CustomerCreated
		EventContainer
*/
package events

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OrderCreated struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	At      int64  `protobuf:"varint,3,opt,name=at,proto3" json:"at,omitempty"`
}

func (m *OrderCreated) Reset()                    { *m = OrderCreated{} }
func (m *OrderCreated) String() string            { return proto.CompactTextString(m) }
func (*OrderCreated) ProtoMessage()               {}
func (*OrderCreated) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

func (m *OrderCreated) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderCreated) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderCreated) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

type OrderItemAAdded struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	At      int64  `protobuf:"varint,3,opt,name=at,proto3" json:"at,omitempty"`
	ItemA   string `protobuf:"bytes,4,opt,name=item_a,json=itemA,proto3" json:"item_a,omitempty"`
}

func (m *OrderItemAAdded) Reset()                    { *m = OrderItemAAdded{} }
func (m *OrderItemAAdded) String() string            { return proto.CompactTextString(m) }
func (*OrderItemAAdded) ProtoMessage()               {}
func (*OrderItemAAdded) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{1} }

func (m *OrderItemAAdded) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderItemAAdded) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderItemAAdded) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *OrderItemAAdded) GetItemA() string {
	if m != nil {
		return m.ItemA
	}
	return ""
}

type OrderItemBAdded struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	At      int64  `protobuf:"varint,3,opt,name=at,proto3" json:"at,omitempty"`
	ItemB   string `protobuf:"bytes,4,opt,name=item_b,json=itemB,proto3" json:"item_b,omitempty"`
}

func (m *OrderItemBAdded) Reset()                    { *m = OrderItemBAdded{} }
func (m *OrderItemBAdded) String() string            { return proto.CompactTextString(m) }
func (*OrderItemBAdded) ProtoMessage()               {}
func (*OrderItemBAdded) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{2} }

func (m *OrderItemBAdded) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderItemBAdded) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderItemBAdded) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *OrderItemBAdded) GetItemB() string {
	if m != nil {
		return m.ItemB
	}
	return ""
}

type OrderItemRemoved struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	At      int64  `protobuf:"varint,3,opt,name=at,proto3" json:"at,omitempty"`
	ItemId  string `protobuf:"bytes,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (m *OrderItemRemoved) Reset()                    { *m = OrderItemRemoved{} }
func (m *OrderItemRemoved) String() string            { return proto.CompactTextString(m) }
func (*OrderItemRemoved) ProtoMessage()               {}
func (*OrderItemRemoved) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{3} }

func (m *OrderItemRemoved) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderItemRemoved) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderItemRemoved) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *OrderItemRemoved) GetItemId() string {
	if m != nil {
		return m.ItemId
	}
	return ""
}

type OrderFulfilled struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version  int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	At       int64  `protobuf:"varint,3,opt,name=at,proto3" json:"at,omitempty"`
	By       string `protobuf:"bytes,4,opt,name=by,proto3" json:"by,omitempty"`
	Approved bool   `protobuf:"varint,5,opt,name=approved,proto3" json:"approved,omitempty"`
}

func (m *OrderFulfilled) Reset()                    { *m = OrderFulfilled{} }
func (m *OrderFulfilled) String() string            { return proto.CompactTextString(m) }
func (*OrderFulfilled) ProtoMessage()               {}
func (*OrderFulfilled) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{4} }

func (m *OrderFulfilled) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderFulfilled) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderFulfilled) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *OrderFulfilled) GetBy() string {
	if m != nil {
		return m.By
	}
	return ""
}

func (m *OrderFulfilled) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

type OrderAssignCustomer struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version    int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	At         int64  `protobuf:"varint,3,opt,name=at,proto3" json:"at,omitempty"`
	CustomerId string `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (m *OrderAssignCustomer) Reset()                    { *m = OrderAssignCustomer{} }
func (m *OrderAssignCustomer) String() string            { return proto.CompactTextString(m) }
func (*OrderAssignCustomer) ProtoMessage()               {}
func (*OrderAssignCustomer) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{5} }

func (m *OrderAssignCustomer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OrderAssignCustomer) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderAssignCustomer) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *OrderAssignCustomer) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

type CustomerCreated struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	At      int64  `protobuf:"varint,3,opt,name=at,proto3" json:"at,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CustomerCreated) Reset()                    { *m = CustomerCreated{} }
func (m *CustomerCreated) String() string            { return proto.CompactTextString(m) }
func (*CustomerCreated) ProtoMessage()               {}
func (*CustomerCreated) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{6} }

func (m *CustomerCreated) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CustomerCreated) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CustomerCreated) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *CustomerCreated) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EventContainer struct {
	Type int32                `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Ma   *OrderCreated        `protobuf:"bytes,2,opt,name=ma" json:"ma,omitempty"`
	Mc   *OrderFulfilled      `protobuf:"bytes,3,opt,name=mc" json:"mc,omitempty"`
	Mf   *OrderItemRemoved    `protobuf:"bytes,5,opt,name=mf" json:"mf,omitempty"`
	Mg   *CustomerCreated     `protobuf:"bytes,6,opt,name=mg" json:"mg,omitempty"`
	Mh   *OrderAssignCustomer `protobuf:"bytes,7,opt,name=mh" json:"mh,omitempty"`
	Ia   *OrderItemAAdded     `protobuf:"bytes,101,opt,name=ia" json:"ia,omitempty"`
	Ib   *OrderItemBAdded     `protobuf:"bytes,102,opt,name=ib" json:"ib,omitempty"`
}

func (m *EventContainer) Reset()                    { *m = EventContainer{} }
func (m *EventContainer) String() string            { return proto.CompactTextString(m) }
func (*EventContainer) ProtoMessage()               {}
func (*EventContainer) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{7} }

func (m *EventContainer) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *EventContainer) GetMa() *OrderCreated {
	if m != nil {
		return m.Ma
	}
	return nil
}

func (m *EventContainer) GetMc() *OrderFulfilled {
	if m != nil {
		return m.Mc
	}
	return nil
}

func (m *EventContainer) GetMf() *OrderItemRemoved {
	if m != nil {
		return m.Mf
	}
	return nil
}

func (m *EventContainer) GetMg() *CustomerCreated {
	if m != nil {
		return m.Mg
	}
	return nil
}

func (m *EventContainer) GetMh() *OrderAssignCustomer {
	if m != nil {
		return m.Mh
	}
	return nil
}

func (m *EventContainer) GetIa() *OrderItemAAdded {
	if m != nil {
		return m.Ia
	}
	return nil
}

func (m *EventContainer) GetIb() *OrderItemBAdded {
	if m != nil {
		return m.Ib
	}
	return nil
}

func init() {
	proto.RegisterType((*OrderCreated)(nil), "github.es.events.v1.order_created")
	proto.RegisterType((*OrderItemAAdded)(nil), "github.es.events.v1.order_item_a_added")
	proto.RegisterType((*OrderItemBAdded)(nil), "github.es.events.v1.order_item_b_added")
	proto.RegisterType((*OrderItemRemoved)(nil), "github.es.events.v1.order_item_removed")
	proto.RegisterType((*OrderFulfilled)(nil), "github.es.events.v1.order_fulfilled")
	proto.RegisterType((*OrderAssignCustomer)(nil), "github.es.events.v1.order_assign_customer")
	proto.RegisterType((*CustomerCreated)(nil), "github.es.events.v1.customer_created")
	proto.RegisterType((*EventContainer)(nil), "github.es.events.v1.event_container")
}
func (m *OrderCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderCreated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Version))
	}
	if m.At != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.At))
	}
	return i, nil
}

func (m *OrderItemAAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderItemAAdded) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Version))
	}
	if m.At != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.At))
	}
	if len(m.ItemA) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ItemA)))
		i += copy(dAtA[i:], m.ItemA)
	}
	return i, nil
}

func (m *OrderItemBAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderItemBAdded) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Version))
	}
	if m.At != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.At))
	}
	if len(m.ItemB) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ItemB)))
		i += copy(dAtA[i:], m.ItemB)
	}
	return i, nil
}

func (m *OrderItemRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderItemRemoved) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Version))
	}
	if m.At != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.At))
	}
	if len(m.ItemId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ItemId)))
		i += copy(dAtA[i:], m.ItemId)
	}
	return i, nil
}

func (m *OrderFulfilled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderFulfilled) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Version))
	}
	if m.At != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.At))
	}
	if len(m.By) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.By)))
		i += copy(dAtA[i:], m.By)
	}
	if m.Approved {
		dAtA[i] = 0x28
		i++
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *OrderAssignCustomer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderAssignCustomer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Version))
	}
	if m.At != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.At))
	}
	if len(m.CustomerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CustomerId)))
		i += copy(dAtA[i:], m.CustomerId)
	}
	return i, nil
}

func (m *CustomerCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomerCreated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Version))
	}
	if m.At != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.At))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *EventContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventContainer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Type))
	}
	if m.Ma != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Ma.Size()))
		n1, err := m.Ma.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Mc != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Mc.Size()))
		n2, err := m.Mc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Mf != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Mf.Size()))
		n3, err := m.Mf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Mg != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Mg.Size()))
		n4, err := m.Mg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Mh != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Mh.Size()))
		n5, err := m.Mh.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Ia != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Ia.Size()))
		n6, err := m.Ia.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Ib != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Ib.Size()))
		n7, err := m.Ib.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OrderCreated) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEvents(uint64(m.Version))
	}
	if m.At != 0 {
		n += 1 + sovEvents(uint64(m.At))
	}
	return n
}

func (m *OrderItemAAdded) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEvents(uint64(m.Version))
	}
	if m.At != 0 {
		n += 1 + sovEvents(uint64(m.At))
	}
	l = len(m.ItemA)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *OrderItemBAdded) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEvents(uint64(m.Version))
	}
	if m.At != 0 {
		n += 1 + sovEvents(uint64(m.At))
	}
	l = len(m.ItemB)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *OrderItemRemoved) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEvents(uint64(m.Version))
	}
	if m.At != 0 {
		n += 1 + sovEvents(uint64(m.At))
	}
	l = len(m.ItemId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *OrderFulfilled) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEvents(uint64(m.Version))
	}
	if m.At != 0 {
		n += 1 + sovEvents(uint64(m.At))
	}
	l = len(m.By)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Approved {
		n += 2
	}
	return n
}

func (m *OrderAssignCustomer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEvents(uint64(m.Version))
	}
	if m.At != 0 {
		n += 1 + sovEvents(uint64(m.At))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *CustomerCreated) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEvents(uint64(m.Version))
	}
	if m.At != 0 {
		n += 1 + sovEvents(uint64(m.At))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventContainer) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEvents(uint64(m.Type))
	}
	if m.Ma != nil {
		l = m.Ma.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Mc != nil {
		l = m.Mc.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Mf != nil {
		l = m.Mf.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Mg != nil {
		l = m.Mg.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Mh != nil {
		l = m.Mh.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Ia != nil {
		l = m.Ia.Size()
		n += 2 + l + sovEvents(uint64(l))
	}
	if m.Ib != nil {
		l = m.Ib.Size()
		n += 2 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: order_created: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: order_created: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderItemAAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: order_item_a_added: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: order_item_a_added: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderItemBAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: order_item_b_added: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: order_item_b_added: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderItemRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: order_item_removed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: order_item_removed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderFulfilled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: order_fulfilled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: order_fulfilled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field By", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.By = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderAssignCustomer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: order_assign_customer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: order_assign_customer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomerCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: customer_created: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: customer_created: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: event_container: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: event_container: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ma", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ma == nil {
				m.Ma = &OrderCreated{}
			}
			if err := m.Ma.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mc == nil {
				m.Mc = &OrderFulfilled{}
			}
			if err := m.Mc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mf == nil {
				m.Mf = &OrderItemRemoved{}
			}
			if err := m.Mf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mg == nil {
				m.Mg = &CustomerCreated{}
			}
			if err := m.Mg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mh == nil {
				m.Mh = &OrderAssignCustomer{}
			}
			if err := m.Mh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ia", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ia == nil {
				m.Ia = &OrderItemAAdded{}
			}
			if err := m.Ia.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ib", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ib == nil {
				m.Ib = &OrderItemBAdded{}
			}
			if err := m.Ib.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc/events/events.proto", fileDescriptorEvents) }

var fileDescriptorEvents = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x15, 0x77, 0xdb, 0x2e, 0x53, 0xb1, 0x8b, 0x0c, 0xab, 0xb5, 0xf6, 0x50, 0xaa, 0x08,
	0x44, 0x85, 0x44, 0x2a, 0x0a, 0x08, 0x89, 0x1b, 0x7b, 0xeb, 0xd5, 0x47, 0x2e, 0xc1, 0x4e, 0x9c,
	0xd4, 0x52, 0x1d, 0x47, 0x8e, 0x5b, 0xd4, 0x87, 0xe2, 0x3d, 0x38, 0xf2, 0x08, 0xa8, 0x4f, 0x82,
	0x32, 0x49, 0xcb, 0x6e, 0xb5, 0xaa, 0x56, 0x0a, 0xa7, 0xce, 0x8c, 0xe6, 0xff, 0xbf, 0xa9, 0xed,
	0x09, 0x5c, 0xbb, 0x32, 0x99, 0xa9, 0x8d, 0x2a, 0x7c, 0xd5, 0xfe, 0x44, 0xa5, 0xb3, 0xde, 0xd2,
	0xe7, 0xb9, 0xf6, 0xcb, 0xb5, 0x8c, 0x54, 0x15, 0xb5, 0xf5, 0xcd, 0xfb, 0x9b, 0x77, 0x6d, 0x31,
	0xb1, 0x66, 0x96, 0xdb, 0xdc, 0xce, 0xb0, 0x57, 0xae, 0x33, 0xcc, 0x30, 0xc1, 0xa8, 0xf1, 0x08,
	0x17, 0xf0, 0xd4, 0xba, 0x54, 0xb9, 0x38, 0x71, 0x4a, 0x78, 0x95, 0xd2, 0x0b, 0x20, 0x3a, 0x65,
	0xc1, 0x24, 0x98, 0x3e, 0xe1, 0x44, 0xa7, 0x94, 0xc1, 0x70, 0xa3, 0x5c, 0xa5, 0x6d, 0xc1, 0xc8,
	0x24, 0x98, 0xf6, 0xf9, 0x3e, 0xad, 0x3b, 0x85, 0x67, 0xbd, 0x49, 0x30, 0xed, 0x71, 0x22, 0x7c,
	0xa8, 0x80, 0x36, 0x56, 0xda, 0x2b, 0x13, 0x8b, 0x58, 0xa4, 0x69, 0x17, 0x3f, 0x7a, 0x05, 0x83,
	0xc6, 0x89, 0x9d, 0xa1, 0xba, 0x5f, 0x67, 0x5f, 0x8f, 0x30, 0xf2, 0xbf, 0x61, 0xe4, 0x5d, 0xcc,
	0x6d, 0x98, 0xdf, 0xc3, 0x38, 0x65, 0xec, 0xa6, 0x13, 0xe6, 0x1a, 0x86, 0xe8, 0xa4, 0xd3, 0x96,
	0x83, 0xd4, 0x45, 0x1a, 0xfe, 0x80, 0xcb, 0x06, 0x94, 0xad, 0x57, 0x99, 0x5e, 0xad, 0x3a, 0x51,
	0x2e, 0x80, 0xc8, 0x6d, 0x0b, 0x20, 0x72, 0x4b, 0x6f, 0xe0, 0x5c, 0x94, 0xa5, 0xab, 0x67, 0x67,
	0xfd, 0x49, 0x30, 0x3d, 0xe7, 0x87, 0x3c, 0x74, 0x70, 0xd5, 0x80, 0x45, 0x55, 0xe9, 0xbc, 0x88,
	0x93, 0x75, 0xe5, 0xad, 0x51, 0xae, 0x03, 0xfe, 0x25, 0x8c, 0xf6, 0x2e, 0xff, 0xfe, 0x28, 0xec,
	0x4b, 0x8b, 0x34, 0xfc, 0x0e, 0xcf, 0x0e, 0x0d, 0x9d, 0x5f, 0x1c, 0xa5, 0x70, 0x56, 0x08, 0xa3,
	0x5a, 0x0e, 0xc6, 0xe1, 0xcf, 0x1e, 0x5c, 0xe2, 0x36, 0xc4, 0x89, 0x2d, 0xbc, 0xd0, 0x85, 0x72,
	0x75, 0x9f, 0xdf, 0x96, 0x0a, 0x19, 0x7d, 0x8e, 0x31, 0x9d, 0x03, 0x31, 0x02, 0x01, 0xa3, 0x79,
	0x18, 0x3d, 0xb0, 0x49, 0xd1, 0xbd, 0xbd, 0xe0, 0xc4, 0x08, 0xfa, 0x11, 0x88, 0x49, 0x90, 0x3f,
	0x9a, 0xbf, 0x3a, 0xa1, 0x39, 0xdc, 0x24, 0x27, 0x26, 0xa1, 0x9f, 0x81, 0x98, 0x0c, 0x4f, 0x7f,
	0x34, 0x7f, 0x73, 0x42, 0x75, 0xf7, 0xa1, 0x71, 0x62, 0x32, 0xfa, 0x09, 0x88, 0xc9, 0xd9, 0x00,
	0x85, 0xaf, 0x1f, 0x14, 0x1e, 0x9f, 0x25, 0x27, 0x26, 0xa7, 0x5f, 0x80, 0x98, 0x25, 0x1b, 0xa2,
	0xec, 0xed, 0x09, 0xde, 0xd1, 0xb5, 0x73, 0x62, 0x96, 0xf5, 0xac, 0x5a, 0x30, 0xf5, 0xb8, 0x59,
	0xdb, 0x15, 0xe7, 0x44, 0x0b, 0x14, 0x4a, 0x96, 0x3d, 0x4e, 0x28, 0x0f, 0x42, 0x79, 0xfb, 0xe2,
	0xd7, 0x6e, 0x1c, 0xfc, 0xde, 0x8d, 0x83, 0x3f, 0xbb, 0x71, 0xf0, 0x6d, 0xd0, 0xf4, 0xcb, 0x01,
	0x7e, 0x9d, 0x3e, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xa3, 0x27, 0x47, 0xfc, 0x04, 0x00,
	0x00,
}
