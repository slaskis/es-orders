// Code generated by protoc-gen-twirp v5.0.0, DO NOT EDIT.
// source: rpc/user_service.proto

package rpc

import bytes "bytes"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import log "log"
import http "net/http"

import jsonpb "github.com/gogo/protobuf/jsonpb"
import proto "github.com/gogo/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =====================
// UserService Interface
// =====================

type UserService interface {
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
}

// ===========================
// UserService Protobuf Client
// ===========================

type userServiceProtobufClient struct {
	urlBase string
	client  *http.Client
}

// NewUserServiceProtobufClient creates a Protobuf client that implements the UserService interface.
// It communicates using protobuf messages and can be configured with a custom http.Client.
func NewUserServiceProtobufClient(addr string, client *http.Client) UserService {
	return &userServiceProtobufClient{
		urlBase: urlBase(addr),
		client:  withoutRedirects(client),
	}
}

func (c *userServiceProtobufClient) GetUser(ctx context.Context, in *GetUserRequest) (*UserResponse, error) {
	url := c.urlBase + UserServicePathPrefix + "GetUser"
	out := new(UserResponse)
	err := doProtoRequest(ctx, c.client, url, in, out)
	return out, err
}

// =======================
// UserService JSON Client
// =======================

type userServiceJSONClient struct {
	urlBase string
	client  *http.Client
}

// NewUserServiceJSONClient creates a JSON client that implements the UserService interface.
// It communicates using JSON requests and responses instead of protobuf messages.
func NewUserServiceJSONClient(addr string, client *http.Client) UserService {
	return &userServiceJSONClient{
		urlBase: urlBase(addr),
		client:  withoutRedirects(client),
	}
}

func (c *userServiceJSONClient) GetUser(ctx context.Context, in *GetUserRequest) (*UserResponse, error) {
	url := c.urlBase + UserServicePathPrefix + "GetUser"
	out := new(UserResponse)
	err := doJSONRequest(ctx, c.client, url, in, out)
	return out, err
}

// ==========================
// UserService Server Handler
// ==========================

type userServiceServer struct {
	UserService
	hooks *twirp.ServerHooks
}

func NewUserServiceServer(svc UserService, hooks *twirp.ServerHooks) TwirpServer {
	return &userServiceServer{
		UserService: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *userServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// UserServicePathPrefix is used for all URL paths on a twirp UserService server.
// Requests are always: POST UserServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const UserServicePathPrefix = "/twirp/acme.UserService/"

func (s *userServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "acme")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/acme.UserService/GetUser":
		s.serveGetUser(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *userServiceServer) serveGetUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	switch req.Header.Get("Content-Type") {
	case "application/json":
		s.serveGetUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveGetUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	reqContent := new(GetUserRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetUser(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling GetUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(buf.Bytes()); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveGetUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	defer closebody(req.Body)
	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UserResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetUser(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserResponse and nil error while calling GetUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if _, err = resp.Write(respBytes); err != nil {
		log.Printf("errored while writing response to client, but already sent response status code to 200: %s", err)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *userServiceServer) ProtocGenTwirpVersion() string {
	return "v5.0.0"
}

var twirpFileDescriptor2 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x71, 0x9b, 0x52, 0x7a, 0x45, 0x95, 0xb0, 0x10, 0x8a, 0x32, 0xa4, 0x51, 0xa7, 0x2e,
	0xb8, 0x52, 0xfb, 0x04, 0x2d, 0x03, 0x7b, 0x80, 0x85, 0xa5, 0x4a, 0x9d, 0x23, 0x58, 0x22, 0xb5,
	0xb1, 0x9d, 0x3e, 0x07, 0x8f, 0xd5, 0x09, 0xf1, 0x04, 0x80, 0xfa, 0x24, 0x28, 0x76, 0x22, 0xfe,
	0x6c, 0x6c, 0x77, 0xb9, 0xef, 0xf7, 0x7d, 0xb9, 0x33, 0x5c, 0x68, 0xc5, 0x67, 0x95, 0x41, 0xbd,
	0x36, 0xa8, 0x77, 0x82, 0x23, 0x53, 0x5a, 0x5a, 0x49, 0x83, 0x8c, 0x97, 0x18, 0x5d, 0x16, 0xc2,
	0x3e, 0x56, 0x1b, 0xc6, 0x65, 0x39, 0x2b, 0x64, 0x21, 0x67, 0x6e, 0xb8, 0xa9, 0x1e, 0x5c, 0xe7,
	0x1a, 0x57, 0x79, 0x28, 0x1a, 0x17, 0x52, 0x16, 0x4f, 0xf8, 0xad, 0xb2, 0xa2, 0x44, 0x63, 0xb3,
	0x52, 0x79, 0xc1, 0xe4, 0x95, 0x40, 0x70, 0x67, 0x50, 0xd3, 0x11, 0x74, 0x44, 0x1e, 0x92, 0x84,
	0x4c, 0x07, 0x69, 0x47, 0xe4, 0x34, 0x84, 0xfe, 0x0e, 0xb5, 0x11, 0x72, 0x1b, 0x76, 0x12, 0x32,
	0xed, 0xa5, 0x6d, 0x4b, 0x29, 0x04, 0xdb, 0xac, 0xc4, 0xb0, 0xeb, 0xb4, 0xae, 0xa6, 0x57, 0x00,
	0x5c, 0x63, 0x66, 0x31, 0x5f, 0x67, 0x36, 0x0c, 0x12, 0x32, 0x1d, 0xce, 0x23, 0xe6, 0xc3, 0x59,
	0x1b, 0xce, 0x6e, 0xdb, 0xf0, 0xd5, 0xc9, 0xfe, 0x7d, 0x7c, 0xf4, 0xf2, 0x31, 0x26, 0xe9, 0xa0,
	0xe1, 0x96, 0xb6, 0x36, 0xa9, 0x54, 0xde, 0x9a, 0xf4, 0xfe, 0x63, 0xd2, 0x70, 0x4b, 0x3b, 0x61,
	0x70, 0x5a, 0xef, 0x93, 0xa2, 0x51, 0x72, 0x6b, 0x90, 0xc6, 0x10, 0xd4, 0xc7, 0x74, 0x9b, 0x0d,
	0xe7, 0xc0, 0xea, 0x2b, 0x32, 0xa7, 0x70, 0xdf, 0x27, 0x09, 0x8c, 0xae, 0xd1, 0x7a, 0xe4, 0xb9,
	0x42, 0x63, 0xff, 0x5e, 0x62, 0xbe, 0x82, 0x61, 0x3d, 0xbe, 0xf1, 0xaf, 0x41, 0x17, 0xd0, 0x6f,
	0x00, 0x7a, 0xee, 0xdd, 0x7e, 0xf3, 0x11, 0xfd, 0x91, 0xd1, 0xfc, 0xc5, 0xea, 0x6c, 0x7f, 0x88,
	0xc9, 0xdb, 0x21, 0x26, 0x9f, 0x87, 0x98, 0xdc, 0x77, 0xb5, 0xe2, 0x9b, 0x63, 0xb7, 0xd1, 0xe2,
	0x2b, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x7e, 0xa1, 0x66, 0xf0, 0x01, 0x00, 0x00,
}
